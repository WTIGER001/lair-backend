// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutWorkpaceByIDHandlerFunc turns a function with the right signature into a put workpace by Id handler
type PutWorkpaceByIDHandlerFunc func(PutWorkpaceByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutWorkpaceByIDHandlerFunc) Handle(params PutWorkpaceByIDParams) middleware.Responder {
	return fn(params)
}

// PutWorkpaceByIDHandler interface for that can handle valid put workpace by Id params
type PutWorkpaceByIDHandler interface {
	Handle(PutWorkpaceByIDParams) middleware.Responder
}

// NewPutWorkpaceByID creates a new http.Handler for the put workpace by Id operation
func NewPutWorkpaceByID(ctx *middleware.Context, handler PutWorkpaceByIDHandler) *PutWorkpaceByID {
	return &PutWorkpaceByID{Context: ctx, Handler: handler}
}

/*PutWorkpaceByID swagger:route PUT /workspaces/{id} putWorkpaceById

Updates a workspace

*/
type PutWorkpaceByID struct {
	Context *middleware.Context
	Handler PutWorkpaceByIDHandler
}

func (o *PutWorkpaceByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutWorkpaceByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
