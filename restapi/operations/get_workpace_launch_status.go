// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetWorkpaceLaunchStatusHandlerFunc turns a function with the right signature into a get workpace launch status handler
type GetWorkpaceLaunchStatusHandlerFunc func(GetWorkpaceLaunchStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetWorkpaceLaunchStatusHandlerFunc) Handle(params GetWorkpaceLaunchStatusParams) middleware.Responder {
	return fn(params)
}

// GetWorkpaceLaunchStatusHandler interface for that can handle valid get workpace launch status params
type GetWorkpaceLaunchStatusHandler interface {
	Handle(GetWorkpaceLaunchStatusParams) middleware.Responder
}

// NewGetWorkpaceLaunchStatus creates a new http.Handler for the get workpace launch status operation
func NewGetWorkpaceLaunchStatus(ctx *middleware.Context, handler GetWorkpaceLaunchStatusHandler) *GetWorkpaceLaunchStatus {
	return &GetWorkpaceLaunchStatus{Context: ctx, Handler: handler}
}

/*GetWorkpaceLaunchStatus swagger:route GET /workspaces/{id}/launch getWorkpaceLaunchStatus

Requests a workspace to be launched

*/
type GetWorkpaceLaunchStatus struct {
	Context *middleware.Context
	Handler GetWorkpaceLaunchStatusHandler
}

func (o *GetWorkpaceLaunchStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetWorkpaceLaunchStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
