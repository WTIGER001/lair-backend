// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostWorkpaceByIDHandlerFunc turns a function with the right signature into a post workpace by Id handler
type PostWorkpaceByIDHandlerFunc func(PostWorkpaceByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostWorkpaceByIDHandlerFunc) Handle(params PostWorkpaceByIDParams) middleware.Responder {
	return fn(params)
}

// PostWorkpaceByIDHandler interface for that can handle valid post workpace by Id params
type PostWorkpaceByIDHandler interface {
	Handle(PostWorkpaceByIDParams) middleware.Responder
}

// NewPostWorkpaceByID creates a new http.Handler for the post workpace by Id operation
func NewPostWorkpaceByID(ctx *middleware.Context, handler PostWorkpaceByIDHandler) *PostWorkpaceByID {
	return &PostWorkpaceByID{Context: ctx, Handler: handler}
}

/*PostWorkpaceByID swagger:route POST /workspaces/{id} postWorkpaceById

Updates a workspace

*/
type PostWorkpaceByID struct {
	Context *middleware.Context
	Handler PostWorkpaceByIDHandler
}

func (o *PostWorkpaceByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostWorkpaceByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
