// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// LaunchWorkpaceByIDHandlerFunc turns a function with the right signature into a launch workpace by Id handler
type LaunchWorkpaceByIDHandlerFunc func(LaunchWorkpaceByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LaunchWorkpaceByIDHandlerFunc) Handle(params LaunchWorkpaceByIDParams) middleware.Responder {
	return fn(params)
}

// LaunchWorkpaceByIDHandler interface for that can handle valid launch workpace by Id params
type LaunchWorkpaceByIDHandler interface {
	Handle(LaunchWorkpaceByIDParams) middleware.Responder
}

// NewLaunchWorkpaceByID creates a new http.Handler for the launch workpace by Id operation
func NewLaunchWorkpaceByID(ctx *middleware.Context, handler LaunchWorkpaceByIDHandler) *LaunchWorkpaceByID {
	return &LaunchWorkpaceByID{Context: ctx, Handler: handler}
}

/*LaunchWorkpaceByID swagger:route POST /workspaces/{id}/launch launchWorkpaceById

Requests a workspace to be launched

*/
type LaunchWorkpaceByID struct {
	Context *middleware.Context
	Handler LaunchWorkpaceByIDHandler
}

func (o *LaunchWorkpaceByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewLaunchWorkpaceByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
